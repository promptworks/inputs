#!/usr/bin/env node

const fs = require("fs");
const { parse } = require("react-docgen-typescript");

function isComponent(doc) {
  return /^[A-Z]/.test(doc.displayName);
}

function isProp(prop) {
  return prop.parent ? !prop.parent.fileName.includes("node_modules") : true;
}

function getComponents() {
  return parse("src/index.ts", { propFilter: isProp }).filter(isComponent);
}

function render(component) {
  let out = `### ${component.displayName}

  ${component.description}

  #### Props

  | Name | Type | Required | Description |
  |------|------|----------|-------------|
  `;

  for (const [name, prop] of Object.entries(component.props)) {
    const row = [
      name,
      `\`${prop.type.name.replace(/\|/g, "\\|")}\``,
      prop.required ? "✓" : "✗",
      prop.description
    ];

    out += `| ${row.join(" | ")} |\n`;
  }

  return out;
}

const readme = fs.readFileSync("README.md", "utf-8").split("\n");
const start = readme.indexOf("<!-- START components -->") + 1;
const count = readme.slice(start).indexOf("<!-- END components -->");

const sections = getComponents().map(render);
readme.splice(start, count, ...sections);

fs.writeFileSync("README.md", readme.join("\n"));
