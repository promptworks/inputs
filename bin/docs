#!/usr/bin/env node

const fs = require("fs");
const prettier = require("prettier");
const docgen = require("react-docgen-typescript");

const isComponent = doc => {
  return /^[A-Z]/.test(doc.displayName);
};

const isProp = prop => {
  return prop.parent ? !prop.parent.fileName.includes("node_modules") : true;
};

const getComponents = () => {
  const docs = docgen.parse("src/index.ts", { propFilter: isProp });
  return docs.filter(isComponent);
};

const render = component => {
  let out = `### ${component.displayName}

  ${component.description}

  #### Props

  | Name | Type | Required |
  |------|------|----------|
  `;

  for (const [name, prop] of Object.entries(component.props)) {
    const type = prop.type.name;
    const required = prop.required ? "✓" : "✗";
    out += `| ${name} | \`${type}\` | ${required} |\n`;
  }

  return out;
};

const run = () => {
  const readme = fs.readFileSync("README.md", "utf-8").split("\n");
  const start = readme.indexOf("<!-- components -->") + 1;
  const count = readme.slice(start).indexOf("<!-- end of components -->");

  const sections = getComponents().map(render);
  readme.splice(start, count, ...sections);

  const output = prettier.format(readme.join("\n"), { parser: "markdown" });
  fs.writeFileSync("README.md", output);
};

run("src");
